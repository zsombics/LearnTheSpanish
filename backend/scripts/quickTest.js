const axios = require('axios');

// Egyszer≈± teljes√≠tm√©ny teszt
async function quickPerformanceTest() {
    console.log('üöÄ GYORS TELJES√çTM√âNY TESZT');
    console.log('============================');
    
    const BASE_URL = 'http://localhost:5000/api';
    const results = {
        apiTests: {},
        databaseTests: {},
        translationTests: {},
        summary: {}
    };

    // API v√°laszid≈ë tesztek - csak a nyilv√°nos v√©gpontok
    console.log('\nüì° API V√ÅLASZID≈ê TESZTEK:');
    
    const apiEndpoints = [
        { name: 'Szavak lek√©r√©se', url: '/words' },
        { name: 'DeepL ford√≠t√°s', url: '/translate', method: 'POST', data: { text: 'hola' } }
    ];

    for (const endpoint of apiEndpoints) {
        const times = [];
        console.log(`\n${endpoint.name}:`);
        
        for (let i = 0; i < 5; i++) {
            const start = Date.now();
            try {
                if (endpoint.method === 'POST') {
                    await axios.post(`${BASE_URL}${endpoint.url}`, endpoint.data);
                } else {
                    await axios.get(`${BASE_URL}${endpoint.url}`);
                }
                const duration = Date.now() - start;
                times.push(duration);
                process.stdout.write('.');
            } catch (error) {
                console.log(`\n‚ùå Hiba: ${endpoint.name} - ${error.message}`);
                // Ha 401/403 hiba, akkor autentik√°ci√≥ sz√ºks√©ges, de a v√©gpont l√©tezik
                if (error.response && (error.response.status === 401 || error.response.status === 403)) {
                    const duration = Date.now() - start;
                    times.push(duration);
                    process.stdout.write('A'); // Autentik√°lt v√©gpont
                }
            }
        }
        
        if (times.length > 0) {
            const avg = times.reduce((a, b) => a + b, 0) / times.length;
            const min = Math.min(...times);
            const max = Math.max(...times);
            
            results.apiTests[endpoint.name] = { avg, min, max };
            console.log(`\n  ${endpoint.name}: ${avg.toFixed(0)}ms (${min}-${max}ms)`);
        }
    }

    // Autentik√°lt v√©gpontok tesztel√©se (csak a v√©gpont l√©tez√©s√©t ellen≈ërizz√ºk)
    console.log('\nüîê AUTENTIK√ÅLT V√âGPONTOK TESZTEL√âSE:');
    const authEndpoints = [
        { name: 'Felhaszn√°l√≥k lek√©r√©se', url: '/users' },
        { name: 'Bejegyz√©sek lek√©r√©se', url: '/posts' },
        { name: 'Kv√≠z eredm√©nyek', url: '/eredmenyek' }
    ];

    for (const endpoint of authEndpoints) {
        const start = Date.now();
        try {
            await axios.get(`${BASE_URL}${endpoint.url}`);
        } catch (error) {
            const duration = Date.now() - start;
            if (error.response && (error.response.status === 401 || error.response.status === 403)) {
                console.log(`  ${endpoint.name}: ${duration}ms ‚úì (autentik√°ci√≥ sz√ºks√©ges)`);
                results.apiTests[endpoint.name] = { avg: duration, min: duration, max: duration, auth: true };
            } else if (error.response && error.response.status === 404) {
                console.log(`  ${endpoint.name}: V√©gpont nem tal√°lhat√≥ ‚úó`);
            } else {
                console.log(`  ${endpoint.name}: ${error.message} ‚úó`);
            }
        }
    }

    // DeepL ford√≠t√°s r√©szletes teszt
    console.log('\nüåê DEEPL FORD√çT√ÅS R√âSZLETES TESZT:');
    const testWords = ['hola', 'gracias', 'por favor', 'buenos d√≠as', '¬øc√≥mo est√°s?'];
    
    for (const word of testWords) {
        const start = Date.now();
        try {
            const response = await axios.post(`${BASE_URL}/translate`, { text: word });
            const duration = Date.now() - start;
            results.translationTests[word] = { duration, success: true };
            console.log(`  "${word}": ${duration}ms ‚úì`);
        } catch (error) {
            const duration = Date.now() - start;
            results.translationTests[word] = { duration, success: false, error: error.message };
            console.log(`  "${word}": ${duration}ms ‚úó (${error.message})`);
        }
    }

    // Mem√≥ria haszn√°lat
    console.log('\nüíæ MEM√ìRIA HASZN√ÅLAT:');
    const memUsage = process.memoryUsage();
    results.memoryUsage = {
        rss: (memUsage.rss / 1024 / 1024).toFixed(2),
        heapUsed: (memUsage.heapUsed / 1024 / 1024).toFixed(2),
        heapTotal: (memUsage.heapTotal / 1024 / 1024).toFixed(2)
    };
    
    console.log(`  RSS: ${results.memoryUsage.rss} MB`);
    console.log(`  Heap Used: ${results.memoryUsage.heapUsed} MB`);
    console.log(`  Heap Total: ${results.memoryUsage.heapTotal} MB`);

    // √ñsszefoglal√≥
    console.log('\nüìä √ñSSZEFOGLAL√ì:');
    
    // Csak a sikeres API tesztek √°tlaga
    const successfulApiTests = Object.values(results.apiTests).filter(test => test.avg);
    const apiAvg = successfulApiTests.length > 0 
        ? successfulApiTests.reduce((sum, test) => sum + test.avg, 0) / successfulApiTests.length 
        : 0;
    
    // Csak a sikeres ford√≠t√°sok √°tlaga
    const successfulTranslations = Object.values(results.translationTests).filter(t => t.success);
    const translationAvg = successfulTranslations.length > 0 
        ? successfulTranslations.reduce((sum, t) => sum + t.duration, 0) / successfulTranslations.length 
        : 0;
    
    results.summary = {
        averageApiResponse: Math.round(apiAvg),
        averageTranslation: Math.round(translationAvg),
        memoryUsage: results.memoryUsage,
        successfulApiTests: successfulApiTests.length,
        successfulTranslations: successfulTranslations.length
    };
    
    console.log(`  √Åtlagos API v√°laszid≈ë: ${results.summary.averageApiResponse}ms (${results.summary.successfulApiTests} sikeres teszt)`);
    console.log(`  √Åtlagos ford√≠t√°si id≈ë: ${results.summary.averageTranslation}ms (${results.summary.successfulTranslations} sikeres ford√≠t√°s)`);
    console.log(`  Mem√≥ria haszn√°lat: ${results.memoryUsage.heapUsed}MB`);
    
    console.log('\n‚úÖ TESZT BEFEJEZVE');
    
    return results;
}

// Script futtat√°sa
if (require.main === module) {
    quickPerformanceTest()
        .then(results => {
            console.log('\nüìã EREDM√âNYEK A DOKUMENT√ÅCI√ìHOZ:');
            console.log('=====================================');
            console.log(`API v√°laszid≈ëk: ${results.summary.averageApiResponse}ms (√°tlag)`);
            console.log(`DeepL ford√≠t√°s: ${results.summary.averageTranslation}ms (√°tlag)`);
            console.log(`Mem√≥ria haszn√°lat: ${results.memoryUsage.heapUsed}MB`);
            console.log(`Sikeres API tesztek: ${results.summary.successfulApiTests}`);
            console.log(`Sikeres ford√≠t√°sok: ${results.summary.successfulTranslations}`);
            console.log('\nEzeket az adatokat be tudod m√°solni a dokument√°ci√≥ba!');
        })
        .catch(error => {
            console.error('‚ùå TESZT HIBA:', error.message);
        });
}

module.exports = { quickPerformanceTest }; 